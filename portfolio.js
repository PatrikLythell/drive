// Generated by CoffeeScript 1.3.3
(function() {
  var Portfolio, google, mimeCheck;

  google = require('./reader');

  mimeCheck = require('./mimeCheck');

  Portfolio = (function() {

    Portfolio.prototype._projects = [];

    Portfolio.prototype._iter = 0;

    Portfolio.prototype._cb = null;

    function Portfolio(item, callback) {
      var _this = this;
      this.item = item;
      this.callback = callback;
      console.log("constructor");
      this._cb = this.callback;
      google.getChildren(null, this.item.id, function(resp) {
        var _i, _len, _ref, _results;
        _ref = resp.items;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          _results.push(_this.findFolders(item));
        }
        return _results;
      });
    }

    Portfolio.prototype.findFolders = function(item) {
      var _this = this;
      console.log("findFolders");
      return google.getFile(null, item.id, function(resp) {
        if (resp.mimeType === 'application/vnd.google-apps.folder') {
          return _this.addFolder(resp);
        }
      });
    };

    Portfolio.prototype.addFolder = function(item) {
      var project;
      console.log("addFolder");
      project = {
        index: item.id,
        title: item.title,
        modified: item.modifiedDate,
        description: item.description,
        files: []
      };
      this._projects.push(project);
      return this.getChildren(this._projects.length - 1, item.id);
    };

    Portfolio.prototype.getChildren = function(i, id) {
      var _this = this;
      console.log("getChildren");
      return (function(i, id) {
        return google.getChildren(null, id, function(resp) {
          var item, j, _i, _len, _ref, _results;
          _ref = resp.items;
          _results = [];
          for (j = _i = 0, _len = _ref.length; _i < _len; j = ++_i) {
            item = _ref[j];
            _results.push((function(item, j) {
              return google.getFile(null, item.id, function(file) {
                if (mimeCheck.indexOf(file.mimeType) > -1) {
                  _this._projects[i].files.push(file.title);
                }
                if (j === resp.items.length - 1) {
                  console.log("callback");
                  return _this._cb();
                }
              });
            })(item, j));
          }
          return _results;
        });
      })(i, id);
    };

    Portfolio.prototype.getObj = function() {
      return this._projects;
    };

    return Portfolio;

  })();

  module.exports = {
    create: function(item, callback) {
      var portfolio;
      console.log("init");
      return portfolio = new Portfolio(item, function(obj) {
        return setTimeout(function() {
          return callback(portfolio.getObj());
        }, 500);
      });
    }
  };

}).call(this);
